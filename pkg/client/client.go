// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package client

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/clientv2"
	"github.com/nibbleshift/gorb/ent"
)

type GorbClient interface {
	CreateBench(ctx context.Context, input CreateBenchInput, interceptors ...clientv2.RequestInterceptor) (*CreateBench, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli *http.Client, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) GorbClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type Query struct {
	Node    ent.Noder   "json:\"node,omitempty\" graphql:\"node\""
	Nodes   []ent.Noder "json:\"nodes\" graphql:\"nodes\""
	Benches []*Bench    "json:\"benches\" graphql:\"benches\""
}
type Mutation struct {
	CreateBenchmark *Bench "json:\"createBenchmark,omitempty\" graphql:\"createBenchmark\""
}
type CreateBench_CreateBenchmark struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CreateBench struct {
	CreateBenchmark *CreateBench_CreateBenchmark "json:\"createBenchmark,omitempty\" graphql:\"createBenchmark\""
}

const CreateBenchDocument = `mutation CreateBench ($input: CreateBenchInput!) {
	createBenchmark(input: $input) {
		id
	}
}
`

func (c *Client) CreateBench(ctx context.Context, input CreateBenchInput, interceptors ...clientv2.RequestInterceptor) (*CreateBench, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res CreateBench
	if err := c.Client.Post(ctx, "CreateBench", CreateBenchDocument, &res, vars, interceptors...); err != nil {
		return &res, err
	}

	return &res, nil
}
