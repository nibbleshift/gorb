// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/nibbleshift/gorb/ent/bench"
)

// Bench is the model entity for the Bench schema.
type Bench struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Os holds the value of the "os" field.
	Os string `json:"os,omitempty"`
	// Arch holds the value of the "arch" field.
	Arch string `json:"arch,omitempty"`
	// CPU holds the value of the "cpu" field.
	CPU string `json:"cpu,omitempty"`
	// Package holds the value of the "package" field.
	Package string `json:"package,omitempty"`
	// Pass holds the value of the "pass" field.
	Pass bool `json:"pass,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BenchQuery when eager-loading is set.
	Edges BenchEdges `json:"edges"`
}

// BenchEdges holds the relations/edges for other nodes in the graph.
type BenchEdges struct {
	// BenchResult holds the value of the bench_result edge.
	BenchResult []*BenchResult `json:"bench_result,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedBenchResult map[string][]*BenchResult
}

// BenchResultOrErr returns the BenchResult value or an error if the edge
// was not loaded in eager-loading.
func (e BenchEdges) BenchResultOrErr() ([]*BenchResult, error) {
	if e.loadedTypes[0] {
		return e.BenchResult, nil
	}
	return nil, &NotLoadedError{edge: "bench_result"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bench) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bench.FieldPass:
			values[i] = new(sql.NullBool)
		case bench.FieldID:
			values[i] = new(sql.NullInt64)
		case bench.FieldOs, bench.FieldArch, bench.FieldCPU, bench.FieldPackage:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Bench", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bench fields.
func (b *Bench) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bench.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case bench.FieldOs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os", values[i])
			} else if value.Valid {
				b.Os = value.String
			}
		case bench.FieldArch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field arch", values[i])
			} else if value.Valid {
				b.Arch = value.String
			}
		case bench.FieldCPU:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cpu", values[i])
			} else if value.Valid {
				b.CPU = value.String
			}
		case bench.FieldPackage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field package", values[i])
			} else if value.Valid {
				b.Package = value.String
			}
		case bench.FieldPass:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field pass", values[i])
			} else if value.Valid {
				b.Pass = value.Bool
			}
		}
	}
	return nil
}

// QueryBenchResult queries the "bench_result" edge of the Bench entity.
func (b *Bench) QueryBenchResult() *BenchResultQuery {
	return NewBenchClient(b.config).QueryBenchResult(b)
}

// Update returns a builder for updating this Bench.
// Note that you need to call Bench.Unwrap() before calling this method if this Bench
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bench) Update() *BenchUpdateOne {
	return NewBenchClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Bench entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bench) Unwrap() *Bench {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bench is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bench) String() string {
	var builder strings.Builder
	builder.WriteString("Bench(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("os=")
	builder.WriteString(b.Os)
	builder.WriteString(", ")
	builder.WriteString("arch=")
	builder.WriteString(b.Arch)
	builder.WriteString(", ")
	builder.WriteString("cpu=")
	builder.WriteString(b.CPU)
	builder.WriteString(", ")
	builder.WriteString("package=")
	builder.WriteString(b.Package)
	builder.WriteString(", ")
	builder.WriteString("pass=")
	builder.WriteString(fmt.Sprintf("%v", b.Pass))
	builder.WriteByte(')')
	return builder.String()
}

// NamedBenchResult returns the BenchResult named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Bench) NamedBenchResult(name string) ([]*BenchResult, error) {
	if b.Edges.namedBenchResult == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedBenchResult[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Bench) appendNamedBenchResult(name string, edges ...*BenchResult) {
	if b.Edges.namedBenchResult == nil {
		b.Edges.namedBenchResult = make(map[string][]*BenchResult)
	}
	if len(edges) == 0 {
		b.Edges.namedBenchResult[name] = []*BenchResult{}
	} else {
		b.Edges.namedBenchResult[name] = append(b.Edges.namedBenchResult[name], edges...)
	}
}

// Benches is a parsable slice of Bench.
type Benches []*Bench
