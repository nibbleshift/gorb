// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nibbleshift/gorb/ent/bench"
	"github.com/nibbleshift/gorb/ent/benchresult"
)

// BenchCreate is the builder for creating a Bench entity.
type BenchCreate struct {
	config
	mutation *BenchMutation
	hooks    []Hook
}

// SetOs sets the "os" field.
func (bc *BenchCreate) SetOs(s string) *BenchCreate {
	bc.mutation.SetOs(s)
	return bc
}

// SetArch sets the "arch" field.
func (bc *BenchCreate) SetArch(s string) *BenchCreate {
	bc.mutation.SetArch(s)
	return bc
}

// SetCPU sets the "cpu" field.
func (bc *BenchCreate) SetCPU(s string) *BenchCreate {
	bc.mutation.SetCPU(s)
	return bc
}

// SetPackage sets the "package" field.
func (bc *BenchCreate) SetPackage(s string) *BenchCreate {
	bc.mutation.SetPackage(s)
	return bc
}

// SetPass sets the "pass" field.
func (bc *BenchCreate) SetPass(b bool) *BenchCreate {
	bc.mutation.SetPass(b)
	return bc
}

// AddResultIDs adds the "results" edge to the BenchResult entity by IDs.
func (bc *BenchCreate) AddResultIDs(ids ...int) *BenchCreate {
	bc.mutation.AddResultIDs(ids...)
	return bc
}

// AddResults adds the "results" edges to the BenchResult entity.
func (bc *BenchCreate) AddResults(b ...*BenchResult) *BenchCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bc.AddResultIDs(ids...)
}

// Mutation returns the BenchMutation object of the builder.
func (bc *BenchCreate) Mutation() *BenchMutation {
	return bc.mutation
}

// Save creates the Bench in the database.
func (bc *BenchCreate) Save(ctx context.Context) (*Bench, error) {
	return withHooks[*Bench, BenchMutation](ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BenchCreate) SaveX(ctx context.Context) *Bench {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BenchCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BenchCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BenchCreate) check() error {
	if _, ok := bc.mutation.Os(); !ok {
		return &ValidationError{Name: "os", err: errors.New(`ent: missing required field "Bench.os"`)}
	}
	if _, ok := bc.mutation.Arch(); !ok {
		return &ValidationError{Name: "arch", err: errors.New(`ent: missing required field "Bench.arch"`)}
	}
	if _, ok := bc.mutation.CPU(); !ok {
		return &ValidationError{Name: "cpu", err: errors.New(`ent: missing required field "Bench.cpu"`)}
	}
	if _, ok := bc.mutation.Package(); !ok {
		return &ValidationError{Name: "package", err: errors.New(`ent: missing required field "Bench.package"`)}
	}
	if _, ok := bc.mutation.Pass(); !ok {
		return &ValidationError{Name: "pass", err: errors.New(`ent: missing required field "Bench.pass"`)}
	}
	return nil
}

func (bc *BenchCreate) sqlSave(ctx context.Context) (*Bench, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BenchCreate) createSpec() (*Bench, *sqlgraph.CreateSpec) {
	var (
		_node = &Bench{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(bench.Table, sqlgraph.NewFieldSpec(bench.FieldID, field.TypeInt))
	)
	if value, ok := bc.mutation.Os(); ok {
		_spec.SetField(bench.FieldOs, field.TypeString, value)
		_node.Os = value
	}
	if value, ok := bc.mutation.Arch(); ok {
		_spec.SetField(bench.FieldArch, field.TypeString, value)
		_node.Arch = value
	}
	if value, ok := bc.mutation.CPU(); ok {
		_spec.SetField(bench.FieldCPU, field.TypeString, value)
		_node.CPU = value
	}
	if value, ok := bc.mutation.Package(); ok {
		_spec.SetField(bench.FieldPackage, field.TypeString, value)
		_node.Package = value
	}
	if value, ok := bc.mutation.Pass(); ok {
		_spec.SetField(bench.FieldPass, field.TypeBool, value)
		_node.Pass = value
	}
	if nodes := bc.mutation.ResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bench.ResultsTable,
			Columns: []string{bench.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: benchresult.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BenchCreateBulk is the builder for creating many Bench entities in bulk.
type BenchCreateBulk struct {
	config
	builders []*BenchCreate
}

// Save creates the Bench entities in the database.
func (bcb *BenchCreateBulk) Save(ctx context.Context) ([]*Bench, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bench, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BenchMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BenchCreateBulk) SaveX(ctx context.Context) []*Bench {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BenchCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BenchCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
