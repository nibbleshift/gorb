// Code generated by ent, DO NOT EDIT.

package benchresult

const (
	// Label holds the string label denoting the benchresult type in the database.
	Label = "bench_result"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldN holds the string denoting the n field in the database.
	FieldN = "n"
	// FieldNsPerOp holds the string denoting the nsperop field in the database.
	FieldNsPerOp = "ns_per_op"
	// FieldAllocedBytesPerOp holds the string denoting the allocedbytesperop field in the database.
	FieldAllocedBytesPerOp = "alloced_bytes_per_op"
	// FieldAllocsPerOp holds the string denoting the allocsperop field in the database.
	FieldAllocsPerOp = "allocs_per_op"
	// FieldMBPerS holds the string denoting the mbpers field in the database.
	FieldMBPerS = "mb_pers"
	// FieldMeasured holds the string denoting the measured field in the database.
	FieldMeasured = "measured"
	// FieldOrd holds the string denoting the ord field in the database.
	FieldOrd = "ord"
	// Table holds the table name of the benchresult in the database.
	Table = "bench_results"
)

// Columns holds all SQL columns for benchresult fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldN,
	FieldNsPerOp,
	FieldAllocedBytesPerOp,
	FieldAllocsPerOp,
	FieldMBPerS,
	FieldMeasured,
	FieldOrd,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "bench_results"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"bench_results",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
