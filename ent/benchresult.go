// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/nibbleshift/gorb/ent/benchresult"
)

// BenchResult is the model entity for the BenchResult schema.
type BenchResult struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// N holds the value of the "n" field.
	N int64 `json:"n,omitempty"`
	// NsPerOp holds the value of the "ns_per_op" field.
	NsPerOp float64 `json:"ns_per_op,omitempty"`
	// AllocedBytesPerOp holds the value of the "alloced_bytes_per_op" field.
	AllocedBytesPerOp uint64 `json:"alloced_bytes_per_op,omitempty"`
	// AllocsPerOp holds the value of the "allocs_per_op" field.
	AllocsPerOp uint64 `json:"allocs_per_op,omitempty"`
	// MBPerS holds the value of the "mb_per_s" field.
	MBPerS float64 `json:"mb_per_s,omitempty"`
	// Measured holds the value of the "measured" field.
	Measured int `json:"measured,omitempty"`
	// Ord holds the value of the "ord" field.
	Ord           int `json:"ord,omitempty"`
	bench_results *int
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BenchResult) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case benchresult.FieldNsPerOp, benchresult.FieldMBPerS:
			values[i] = new(sql.NullFloat64)
		case benchresult.FieldID, benchresult.FieldN, benchresult.FieldAllocedBytesPerOp, benchresult.FieldAllocsPerOp, benchresult.FieldMeasured, benchresult.FieldOrd:
			values[i] = new(sql.NullInt64)
		case benchresult.FieldName:
			values[i] = new(sql.NullString)
		case benchresult.ForeignKeys[0]: // bench_results
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BenchResult", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BenchResult fields.
func (br *BenchResult) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case benchresult.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			br.ID = int(value.Int64)
		case benchresult.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				br.Name = value.String
			}
		case benchresult.FieldN:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field n", values[i])
			} else if value.Valid {
				br.N = value.Int64
			}
		case benchresult.FieldNsPerOp:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field ns_per_op", values[i])
			} else if value.Valid {
				br.NsPerOp = value.Float64
			}
		case benchresult.FieldAllocedBytesPerOp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field alloced_bytes_per_op", values[i])
			} else if value.Valid {
				br.AllocedBytesPerOp = uint64(value.Int64)
			}
		case benchresult.FieldAllocsPerOp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field allocs_per_op", values[i])
			} else if value.Valid {
				br.AllocsPerOp = uint64(value.Int64)
			}
		case benchresult.FieldMBPerS:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field mb_per_s", values[i])
			} else if value.Valid {
				br.MBPerS = value.Float64
			}
		case benchresult.FieldMeasured:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field measured", values[i])
			} else if value.Valid {
				br.Measured = int(value.Int64)
			}
		case benchresult.FieldOrd:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ord", values[i])
			} else if value.Valid {
				br.Ord = int(value.Int64)
			}
		case benchresult.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field bench_results", value)
			} else if value.Valid {
				br.bench_results = new(int)
				*br.bench_results = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this BenchResult.
// Note that you need to call BenchResult.Unwrap() before calling this method if this BenchResult
// was returned from a transaction, and the transaction was committed or rolled back.
func (br *BenchResult) Update() *BenchResultUpdateOne {
	return NewBenchResultClient(br.config).UpdateOne(br)
}

// Unwrap unwraps the BenchResult entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (br *BenchResult) Unwrap() *BenchResult {
	_tx, ok := br.config.driver.(*txDriver)
	if !ok {
		panic("ent: BenchResult is not a transactional entity")
	}
	br.config.driver = _tx.drv
	return br
}

// String implements the fmt.Stringer.
func (br *BenchResult) String() string {
	var builder strings.Builder
	builder.WriteString("BenchResult(")
	builder.WriteString(fmt.Sprintf("id=%v, ", br.ID))
	builder.WriteString("name=")
	builder.WriteString(br.Name)
	builder.WriteString(", ")
	builder.WriteString("n=")
	builder.WriteString(fmt.Sprintf("%v", br.N))
	builder.WriteString(", ")
	builder.WriteString("ns_per_op=")
	builder.WriteString(fmt.Sprintf("%v", br.NsPerOp))
	builder.WriteString(", ")
	builder.WriteString("alloced_bytes_per_op=")
	builder.WriteString(fmt.Sprintf("%v", br.AllocedBytesPerOp))
	builder.WriteString(", ")
	builder.WriteString("allocs_per_op=")
	builder.WriteString(fmt.Sprintf("%v", br.AllocsPerOp))
	builder.WriteString(", ")
	builder.WriteString("mb_per_s=")
	builder.WriteString(fmt.Sprintf("%v", br.MBPerS))
	builder.WriteString(", ")
	builder.WriteString("measured=")
	builder.WriteString(fmt.Sprintf("%v", br.Measured))
	builder.WriteString(", ")
	builder.WriteString("ord=")
	builder.WriteString(fmt.Sprintf("%v", br.Ord))
	builder.WriteByte(')')
	return builder.String()
}

// BenchResults is a parsable slice of BenchResult.
type BenchResults []*BenchResult
