// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nibbleshift/gorb/ent/benchresult"
	"github.com/nibbleshift/gorb/ent/predicate"
)

// BenchResultUpdate is the builder for updating BenchResult entities.
type BenchResultUpdate struct {
	config
	hooks    []Hook
	mutation *BenchResultMutation
}

// Where appends a list predicates to the BenchResultUpdate builder.
func (bru *BenchResultUpdate) Where(ps ...predicate.BenchResult) *BenchResultUpdate {
	bru.mutation.Where(ps...)
	return bru
}

// SetName sets the "name" field.
func (bru *BenchResultUpdate) SetName(s string) *BenchResultUpdate {
	bru.mutation.SetName(s)
	return bru
}

// SetN sets the "n" field.
func (bru *BenchResultUpdate) SetN(i int64) *BenchResultUpdate {
	bru.mutation.ResetN()
	bru.mutation.SetN(i)
	return bru
}

// AddN adds i to the "n" field.
func (bru *BenchResultUpdate) AddN(i int64) *BenchResultUpdate {
	bru.mutation.AddN(i)
	return bru
}

// SetNsPerOp sets the "ns_per_op" field.
func (bru *BenchResultUpdate) SetNsPerOp(f float64) *BenchResultUpdate {
	bru.mutation.ResetNsPerOp()
	bru.mutation.SetNsPerOp(f)
	return bru
}

// AddNsPerOp adds f to the "ns_per_op" field.
func (bru *BenchResultUpdate) AddNsPerOp(f float64) *BenchResultUpdate {
	bru.mutation.AddNsPerOp(f)
	return bru
}

// SetAllocedBytesPerOp sets the "alloced_bytes_per_op" field.
func (bru *BenchResultUpdate) SetAllocedBytesPerOp(i int64) *BenchResultUpdate {
	bru.mutation.ResetAllocedBytesPerOp()
	bru.mutation.SetAllocedBytesPerOp(i)
	return bru
}

// AddAllocedBytesPerOp adds i to the "alloced_bytes_per_op" field.
func (bru *BenchResultUpdate) AddAllocedBytesPerOp(i int64) *BenchResultUpdate {
	bru.mutation.AddAllocedBytesPerOp(i)
	return bru
}

// SetAllocsPerOp sets the "allocs_per_op" field.
func (bru *BenchResultUpdate) SetAllocsPerOp(i int64) *BenchResultUpdate {
	bru.mutation.ResetAllocsPerOp()
	bru.mutation.SetAllocsPerOp(i)
	return bru
}

// AddAllocsPerOp adds i to the "allocs_per_op" field.
func (bru *BenchResultUpdate) AddAllocsPerOp(i int64) *BenchResultUpdate {
	bru.mutation.AddAllocsPerOp(i)
	return bru
}

// SetMBPerS sets the "mb_per_s" field.
func (bru *BenchResultUpdate) SetMBPerS(f float64) *BenchResultUpdate {
	bru.mutation.ResetMBPerS()
	bru.mutation.SetMBPerS(f)
	return bru
}

// AddMBPerS adds f to the "mb_per_s" field.
func (bru *BenchResultUpdate) AddMBPerS(f float64) *BenchResultUpdate {
	bru.mutation.AddMBPerS(f)
	return bru
}

// SetMeasured sets the "measured" field.
func (bru *BenchResultUpdate) SetMeasured(i int64) *BenchResultUpdate {
	bru.mutation.ResetMeasured()
	bru.mutation.SetMeasured(i)
	return bru
}

// AddMeasured adds i to the "measured" field.
func (bru *BenchResultUpdate) AddMeasured(i int64) *BenchResultUpdate {
	bru.mutation.AddMeasured(i)
	return bru
}

// SetOrd sets the "ord" field.
func (bru *BenchResultUpdate) SetOrd(i int64) *BenchResultUpdate {
	bru.mutation.ResetOrd()
	bru.mutation.SetOrd(i)
	return bru
}

// AddOrd adds i to the "ord" field.
func (bru *BenchResultUpdate) AddOrd(i int64) *BenchResultUpdate {
	bru.mutation.AddOrd(i)
	return bru
}

// Mutation returns the BenchResultMutation object of the builder.
func (bru *BenchResultUpdate) Mutation() *BenchResultMutation {
	return bru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bru *BenchResultUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, BenchResultMutation](ctx, bru.sqlSave, bru.mutation, bru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bru *BenchResultUpdate) SaveX(ctx context.Context) int {
	affected, err := bru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bru *BenchResultUpdate) Exec(ctx context.Context) error {
	_, err := bru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bru *BenchResultUpdate) ExecX(ctx context.Context) {
	if err := bru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bru *BenchResultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(benchresult.Table, benchresult.Columns, sqlgraph.NewFieldSpec(benchresult.FieldID, field.TypeInt))
	if ps := bru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bru.mutation.Name(); ok {
		_spec.SetField(benchresult.FieldName, field.TypeString, value)
	}
	if value, ok := bru.mutation.N(); ok {
		_spec.SetField(benchresult.FieldN, field.TypeInt64, value)
	}
	if value, ok := bru.mutation.AddedN(); ok {
		_spec.AddField(benchresult.FieldN, field.TypeInt64, value)
	}
	if value, ok := bru.mutation.NsPerOp(); ok {
		_spec.SetField(benchresult.FieldNsPerOp, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.AddedNsPerOp(); ok {
		_spec.AddField(benchresult.FieldNsPerOp, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.AllocedBytesPerOp(); ok {
		_spec.SetField(benchresult.FieldAllocedBytesPerOp, field.TypeInt64, value)
	}
	if value, ok := bru.mutation.AddedAllocedBytesPerOp(); ok {
		_spec.AddField(benchresult.FieldAllocedBytesPerOp, field.TypeInt64, value)
	}
	if value, ok := bru.mutation.AllocsPerOp(); ok {
		_spec.SetField(benchresult.FieldAllocsPerOp, field.TypeInt64, value)
	}
	if value, ok := bru.mutation.AddedAllocsPerOp(); ok {
		_spec.AddField(benchresult.FieldAllocsPerOp, field.TypeInt64, value)
	}
	if value, ok := bru.mutation.MBPerS(); ok {
		_spec.SetField(benchresult.FieldMBPerS, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.AddedMBPerS(); ok {
		_spec.AddField(benchresult.FieldMBPerS, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.Measured(); ok {
		_spec.SetField(benchresult.FieldMeasured, field.TypeInt64, value)
	}
	if value, ok := bru.mutation.AddedMeasured(); ok {
		_spec.AddField(benchresult.FieldMeasured, field.TypeInt64, value)
	}
	if value, ok := bru.mutation.Ord(); ok {
		_spec.SetField(benchresult.FieldOrd, field.TypeInt64, value)
	}
	if value, ok := bru.mutation.AddedOrd(); ok {
		_spec.AddField(benchresult.FieldOrd, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{benchresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bru.mutation.done = true
	return n, nil
}

// BenchResultUpdateOne is the builder for updating a single BenchResult entity.
type BenchResultUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BenchResultMutation
}

// SetName sets the "name" field.
func (bruo *BenchResultUpdateOne) SetName(s string) *BenchResultUpdateOne {
	bruo.mutation.SetName(s)
	return bruo
}

// SetN sets the "n" field.
func (bruo *BenchResultUpdateOne) SetN(i int64) *BenchResultUpdateOne {
	bruo.mutation.ResetN()
	bruo.mutation.SetN(i)
	return bruo
}

// AddN adds i to the "n" field.
func (bruo *BenchResultUpdateOne) AddN(i int64) *BenchResultUpdateOne {
	bruo.mutation.AddN(i)
	return bruo
}

// SetNsPerOp sets the "ns_per_op" field.
func (bruo *BenchResultUpdateOne) SetNsPerOp(f float64) *BenchResultUpdateOne {
	bruo.mutation.ResetNsPerOp()
	bruo.mutation.SetNsPerOp(f)
	return bruo
}

// AddNsPerOp adds f to the "ns_per_op" field.
func (bruo *BenchResultUpdateOne) AddNsPerOp(f float64) *BenchResultUpdateOne {
	bruo.mutation.AddNsPerOp(f)
	return bruo
}

// SetAllocedBytesPerOp sets the "alloced_bytes_per_op" field.
func (bruo *BenchResultUpdateOne) SetAllocedBytesPerOp(i int64) *BenchResultUpdateOne {
	bruo.mutation.ResetAllocedBytesPerOp()
	bruo.mutation.SetAllocedBytesPerOp(i)
	return bruo
}

// AddAllocedBytesPerOp adds i to the "alloced_bytes_per_op" field.
func (bruo *BenchResultUpdateOne) AddAllocedBytesPerOp(i int64) *BenchResultUpdateOne {
	bruo.mutation.AddAllocedBytesPerOp(i)
	return bruo
}

// SetAllocsPerOp sets the "allocs_per_op" field.
func (bruo *BenchResultUpdateOne) SetAllocsPerOp(i int64) *BenchResultUpdateOne {
	bruo.mutation.ResetAllocsPerOp()
	bruo.mutation.SetAllocsPerOp(i)
	return bruo
}

// AddAllocsPerOp adds i to the "allocs_per_op" field.
func (bruo *BenchResultUpdateOne) AddAllocsPerOp(i int64) *BenchResultUpdateOne {
	bruo.mutation.AddAllocsPerOp(i)
	return bruo
}

// SetMBPerS sets the "mb_per_s" field.
func (bruo *BenchResultUpdateOne) SetMBPerS(f float64) *BenchResultUpdateOne {
	bruo.mutation.ResetMBPerS()
	bruo.mutation.SetMBPerS(f)
	return bruo
}

// AddMBPerS adds f to the "mb_per_s" field.
func (bruo *BenchResultUpdateOne) AddMBPerS(f float64) *BenchResultUpdateOne {
	bruo.mutation.AddMBPerS(f)
	return bruo
}

// SetMeasured sets the "measured" field.
func (bruo *BenchResultUpdateOne) SetMeasured(i int64) *BenchResultUpdateOne {
	bruo.mutation.ResetMeasured()
	bruo.mutation.SetMeasured(i)
	return bruo
}

// AddMeasured adds i to the "measured" field.
func (bruo *BenchResultUpdateOne) AddMeasured(i int64) *BenchResultUpdateOne {
	bruo.mutation.AddMeasured(i)
	return bruo
}

// SetOrd sets the "ord" field.
func (bruo *BenchResultUpdateOne) SetOrd(i int64) *BenchResultUpdateOne {
	bruo.mutation.ResetOrd()
	bruo.mutation.SetOrd(i)
	return bruo
}

// AddOrd adds i to the "ord" field.
func (bruo *BenchResultUpdateOne) AddOrd(i int64) *BenchResultUpdateOne {
	bruo.mutation.AddOrd(i)
	return bruo
}

// Mutation returns the BenchResultMutation object of the builder.
func (bruo *BenchResultUpdateOne) Mutation() *BenchResultMutation {
	return bruo.mutation
}

// Where appends a list predicates to the BenchResultUpdate builder.
func (bruo *BenchResultUpdateOne) Where(ps ...predicate.BenchResult) *BenchResultUpdateOne {
	bruo.mutation.Where(ps...)
	return bruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bruo *BenchResultUpdateOne) Select(field string, fields ...string) *BenchResultUpdateOne {
	bruo.fields = append([]string{field}, fields...)
	return bruo
}

// Save executes the query and returns the updated BenchResult entity.
func (bruo *BenchResultUpdateOne) Save(ctx context.Context) (*BenchResult, error) {
	return withHooks[*BenchResult, BenchResultMutation](ctx, bruo.sqlSave, bruo.mutation, bruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bruo *BenchResultUpdateOne) SaveX(ctx context.Context) *BenchResult {
	node, err := bruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bruo *BenchResultUpdateOne) Exec(ctx context.Context) error {
	_, err := bruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bruo *BenchResultUpdateOne) ExecX(ctx context.Context) {
	if err := bruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bruo *BenchResultUpdateOne) sqlSave(ctx context.Context) (_node *BenchResult, err error) {
	_spec := sqlgraph.NewUpdateSpec(benchresult.Table, benchresult.Columns, sqlgraph.NewFieldSpec(benchresult.FieldID, field.TypeInt))
	id, ok := bruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BenchResult.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, benchresult.FieldID)
		for _, f := range fields {
			if !benchresult.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != benchresult.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bruo.mutation.Name(); ok {
		_spec.SetField(benchresult.FieldName, field.TypeString, value)
	}
	if value, ok := bruo.mutation.N(); ok {
		_spec.SetField(benchresult.FieldN, field.TypeInt64, value)
	}
	if value, ok := bruo.mutation.AddedN(); ok {
		_spec.AddField(benchresult.FieldN, field.TypeInt64, value)
	}
	if value, ok := bruo.mutation.NsPerOp(); ok {
		_spec.SetField(benchresult.FieldNsPerOp, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.AddedNsPerOp(); ok {
		_spec.AddField(benchresult.FieldNsPerOp, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.AllocedBytesPerOp(); ok {
		_spec.SetField(benchresult.FieldAllocedBytesPerOp, field.TypeInt64, value)
	}
	if value, ok := bruo.mutation.AddedAllocedBytesPerOp(); ok {
		_spec.AddField(benchresult.FieldAllocedBytesPerOp, field.TypeInt64, value)
	}
	if value, ok := bruo.mutation.AllocsPerOp(); ok {
		_spec.SetField(benchresult.FieldAllocsPerOp, field.TypeInt64, value)
	}
	if value, ok := bruo.mutation.AddedAllocsPerOp(); ok {
		_spec.AddField(benchresult.FieldAllocsPerOp, field.TypeInt64, value)
	}
	if value, ok := bruo.mutation.MBPerS(); ok {
		_spec.SetField(benchresult.FieldMBPerS, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.AddedMBPerS(); ok {
		_spec.AddField(benchresult.FieldMBPerS, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.Measured(); ok {
		_spec.SetField(benchresult.FieldMeasured, field.TypeInt64, value)
	}
	if value, ok := bruo.mutation.AddedMeasured(); ok {
		_spec.AddField(benchresult.FieldMeasured, field.TypeInt64, value)
	}
	if value, ok := bruo.mutation.Ord(); ok {
		_spec.SetField(benchresult.FieldOrd, field.TypeInt64, value)
	}
	if value, ok := bruo.mutation.AddedOrd(); ok {
		_spec.AddField(benchresult.FieldOrd, field.TypeInt64, value)
	}
	_node = &BenchResult{config: bruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{benchresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bruo.mutation.done = true
	return _node, nil
}
