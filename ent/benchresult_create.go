// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nibbleshift/gorb/ent/benchresult"
)

// BenchResultCreate is the builder for creating a BenchResult entity.
type BenchResultCreate struct {
	config
	mutation *BenchResultMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (brc *BenchResultCreate) SetName(s string) *BenchResultCreate {
	brc.mutation.SetName(s)
	return brc
}

// SetN sets the "n" field.
func (brc *BenchResultCreate) SetN(i int64) *BenchResultCreate {
	brc.mutation.SetN(i)
	return brc
}

// SetNsPerOp sets the "ns_per_op" field.
func (brc *BenchResultCreate) SetNsPerOp(f float64) *BenchResultCreate {
	brc.mutation.SetNsPerOp(f)
	return brc
}

// SetAllocedBytesPerOp sets the "alloced_bytes_per_op" field.
func (brc *BenchResultCreate) SetAllocedBytesPerOp(u uint64) *BenchResultCreate {
	brc.mutation.SetAllocedBytesPerOp(u)
	return brc
}

// SetAllocsPerOp sets the "allocs_per_op" field.
func (brc *BenchResultCreate) SetAllocsPerOp(u uint64) *BenchResultCreate {
	brc.mutation.SetAllocsPerOp(u)
	return brc
}

// SetMBPerS sets the "mb_per_s" field.
func (brc *BenchResultCreate) SetMBPerS(f float64) *BenchResultCreate {
	brc.mutation.SetMBPerS(f)
	return brc
}

// SetMeasured sets the "measured" field.
func (brc *BenchResultCreate) SetMeasured(i int) *BenchResultCreate {
	brc.mutation.SetMeasured(i)
	return brc
}

// SetOrd sets the "ord" field.
func (brc *BenchResultCreate) SetOrd(i int) *BenchResultCreate {
	brc.mutation.SetOrd(i)
	return brc
}

// Mutation returns the BenchResultMutation object of the builder.
func (brc *BenchResultCreate) Mutation() *BenchResultMutation {
	return brc.mutation
}

// Save creates the BenchResult in the database.
func (brc *BenchResultCreate) Save(ctx context.Context) (*BenchResult, error) {
	return withHooks[*BenchResult, BenchResultMutation](ctx, brc.sqlSave, brc.mutation, brc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (brc *BenchResultCreate) SaveX(ctx context.Context) *BenchResult {
	v, err := brc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (brc *BenchResultCreate) Exec(ctx context.Context) error {
	_, err := brc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (brc *BenchResultCreate) ExecX(ctx context.Context) {
	if err := brc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (brc *BenchResultCreate) check() error {
	if _, ok := brc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "BenchResult.name"`)}
	}
	if _, ok := brc.mutation.N(); !ok {
		return &ValidationError{Name: "n", err: errors.New(`ent: missing required field "BenchResult.n"`)}
	}
	if _, ok := brc.mutation.NsPerOp(); !ok {
		return &ValidationError{Name: "ns_per_op", err: errors.New(`ent: missing required field "BenchResult.ns_per_op"`)}
	}
	if _, ok := brc.mutation.AllocedBytesPerOp(); !ok {
		return &ValidationError{Name: "alloced_bytes_per_op", err: errors.New(`ent: missing required field "BenchResult.alloced_bytes_per_op"`)}
	}
	if _, ok := brc.mutation.AllocsPerOp(); !ok {
		return &ValidationError{Name: "allocs_per_op", err: errors.New(`ent: missing required field "BenchResult.allocs_per_op"`)}
	}
	if _, ok := brc.mutation.MBPerS(); !ok {
		return &ValidationError{Name: "mb_per_s", err: errors.New(`ent: missing required field "BenchResult.mb_per_s"`)}
	}
	if _, ok := brc.mutation.Measured(); !ok {
		return &ValidationError{Name: "measured", err: errors.New(`ent: missing required field "BenchResult.measured"`)}
	}
	if _, ok := brc.mutation.Ord(); !ok {
		return &ValidationError{Name: "ord", err: errors.New(`ent: missing required field "BenchResult.ord"`)}
	}
	return nil
}

func (brc *BenchResultCreate) sqlSave(ctx context.Context) (*BenchResult, error) {
	if err := brc.check(); err != nil {
		return nil, err
	}
	_node, _spec := brc.createSpec()
	if err := sqlgraph.CreateNode(ctx, brc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	brc.mutation.id = &_node.ID
	brc.mutation.done = true
	return _node, nil
}

func (brc *BenchResultCreate) createSpec() (*BenchResult, *sqlgraph.CreateSpec) {
	var (
		_node = &BenchResult{config: brc.config}
		_spec = sqlgraph.NewCreateSpec(benchresult.Table, sqlgraph.NewFieldSpec(benchresult.FieldID, field.TypeInt))
	)
	if value, ok := brc.mutation.Name(); ok {
		_spec.SetField(benchresult.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := brc.mutation.N(); ok {
		_spec.SetField(benchresult.FieldN, field.TypeInt64, value)
		_node.N = value
	}
	if value, ok := brc.mutation.NsPerOp(); ok {
		_spec.SetField(benchresult.FieldNsPerOp, field.TypeFloat64, value)
		_node.NsPerOp = value
	}
	if value, ok := brc.mutation.AllocedBytesPerOp(); ok {
		_spec.SetField(benchresult.FieldAllocedBytesPerOp, field.TypeUint64, value)
		_node.AllocedBytesPerOp = value
	}
	if value, ok := brc.mutation.AllocsPerOp(); ok {
		_spec.SetField(benchresult.FieldAllocsPerOp, field.TypeUint64, value)
		_node.AllocsPerOp = value
	}
	if value, ok := brc.mutation.MBPerS(); ok {
		_spec.SetField(benchresult.FieldMBPerS, field.TypeFloat64, value)
		_node.MBPerS = value
	}
	if value, ok := brc.mutation.Measured(); ok {
		_spec.SetField(benchresult.FieldMeasured, field.TypeInt, value)
		_node.Measured = value
	}
	if value, ok := brc.mutation.Ord(); ok {
		_spec.SetField(benchresult.FieldOrd, field.TypeInt, value)
		_node.Ord = value
	}
	return _node, _spec
}

// BenchResultCreateBulk is the builder for creating many BenchResult entities in bulk.
type BenchResultCreateBulk struct {
	config
	builders []*BenchResultCreate
}

// Save creates the BenchResult entities in the database.
func (brcb *BenchResultCreateBulk) Save(ctx context.Context) ([]*BenchResult, error) {
	specs := make([]*sqlgraph.CreateSpec, len(brcb.builders))
	nodes := make([]*BenchResult, len(brcb.builders))
	mutators := make([]Mutator, len(brcb.builders))
	for i := range brcb.builders {
		func(i int, root context.Context) {
			builder := brcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BenchResultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, brcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, brcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, brcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (brcb *BenchResultCreateBulk) SaveX(ctx context.Context) []*BenchResult {
	v, err := brcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (brcb *BenchResultCreateBulk) Exec(ctx context.Context) error {
	_, err := brcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (brcb *BenchResultCreateBulk) ExecX(ctx context.Context) {
	if err := brcb.Exec(ctx); err != nil {
		panic(err)
	}
}
