directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Bench implements Node {
  id: ID!
  os: String!
  arch: String!
  cpu: String!
  package: String!
  pass: Boolean!
  benchResult: [BenchResult!]
}
"""A connection to a list of items."""
type BenchConnection {
  """A list of edges."""
  edges: [BenchEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type BenchEdge {
  """The item at the end of the edge."""
  node: Bench
  """A cursor for use in pagination."""
  cursor: Cursor!
}
type BenchResult implements Node {
  id: ID!
  name: String!
  n: Int!
  nsPerOp: Float!
  allocedBytesPerOp: Int!
  allocsPerOp: Int!
  mbPerS: Float!
  measured: Int!
  ord: Int!
}
"""A connection to a list of items."""
type BenchResultConnection {
  """A list of edges."""
  edges: [BenchResultEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type BenchResultEdge {
  """The item at the end of the edge."""
  node: BenchResult
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
BenchResultWhereInput is used for filtering BenchResult objects.
Input was generated by ent.
"""
input BenchResultWhereInput {
  not: BenchResultWhereInput
  and: [BenchResultWhereInput!]
  or: [BenchResultWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """n field predicates"""
  n: Int
  nNEQ: Int
  nIn: [Int!]
  nNotIn: [Int!]
  nGT: Int
  nGTE: Int
  nLT: Int
  nLTE: Int
  """ns_per_op field predicates"""
  nsPerOp: Float
  nsPerOpNEQ: Float
  nsPerOpIn: [Float!]
  nsPerOpNotIn: [Float!]
  nsPerOpGT: Float
  nsPerOpGTE: Float
  nsPerOpLT: Float
  nsPerOpLTE: Float
  """alloced_bytes_per_op field predicates"""
  allocedBytesPerOp: Int
  allocedBytesPerOpNEQ: Int
  allocedBytesPerOpIn: [Int!]
  allocedBytesPerOpNotIn: [Int!]
  allocedBytesPerOpGT: Int
  allocedBytesPerOpGTE: Int
  allocedBytesPerOpLT: Int
  allocedBytesPerOpLTE: Int
  """allocs_per_op field predicates"""
  allocsPerOp: Int
  allocsPerOpNEQ: Int
  allocsPerOpIn: [Int!]
  allocsPerOpNotIn: [Int!]
  allocsPerOpGT: Int
  allocsPerOpGTE: Int
  allocsPerOpLT: Int
  allocsPerOpLTE: Int
  """mb_per_s field predicates"""
  mbPerS: Float
  mbPerSNEQ: Float
  mbPerSIn: [Float!]
  mbPerSNotIn: [Float!]
  mbPerSGT: Float
  mbPerSGTE: Float
  mbPerSLT: Float
  mbPerSLTE: Float
  """measured field predicates"""
  measured: Int
  measuredNEQ: Int
  measuredIn: [Int!]
  measuredNotIn: [Int!]
  measuredGT: Int
  measuredGTE: Int
  measuredLT: Int
  measuredLTE: Int
  """ord field predicates"""
  ord: Int
  ordNEQ: Int
  ordIn: [Int!]
  ordNotIn: [Int!]
  ordGT: Int
  ordGTE: Int
  ordLT: Int
  ordLTE: Int
}
"""
BenchWhereInput is used for filtering Bench objects.
Input was generated by ent.
"""
input BenchWhereInput {
  not: BenchWhereInput
  and: [BenchWhereInput!]
  or: [BenchWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """os field predicates"""
  os: String
  osNEQ: String
  osIn: [String!]
  osNotIn: [String!]
  osGT: String
  osGTE: String
  osLT: String
  osLTE: String
  osContains: String
  osHasPrefix: String
  osHasSuffix: String
  osEqualFold: String
  osContainsFold: String
  """arch field predicates"""
  arch: String
  archNEQ: String
  archIn: [String!]
  archNotIn: [String!]
  archGT: String
  archGTE: String
  archLT: String
  archLTE: String
  archContains: String
  archHasPrefix: String
  archHasSuffix: String
  archEqualFold: String
  archContainsFold: String
  """cpu field predicates"""
  cpu: String
  cpuNEQ: String
  cpuIn: [String!]
  cpuNotIn: [String!]
  cpuGT: String
  cpuGTE: String
  cpuLT: String
  cpuLTE: String
  cpuContains: String
  cpuHasPrefix: String
  cpuHasSuffix: String
  cpuEqualFold: String
  cpuContainsFold: String
  """package field predicates"""
  package: String
  packageNEQ: String
  packageIn: [String!]
  packageNotIn: [String!]
  packageGT: String
  packageGTE: String
  packageLT: String
  packageLTE: String
  packageContains: String
  packageHasPrefix: String
  packageHasSuffix: String
  packageEqualFold: String
  packageContainsFold: String
  """pass field predicates"""
  pass: Boolean
  passNEQ: Boolean
  """bench_result edge predicates"""
  hasBenchResult: Boolean
  hasBenchResultWith: [BenchResultWhereInput!]
}
"""
CreateBenchInput is used for create Bench object.
Input was generated by ent.
"""
input CreateBenchInput {
  os: String!
  arch: String!
  cpu: String!
  package: String!
  pass: Boolean!
  benchResultIDs: [ID!]
}
"""
CreateBenchResultInput is used for create BenchResult object.
Input was generated by ent.
"""
input CreateBenchResultInput {
  name: String!
  n: Int!
  nsPerOp: Float!
  allocedBytesPerOp: Int!
  allocsPerOp: Int!
  mbPerS: Float!
  measured: Int!
  ord: Int!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/nibbleshift/gorb/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  benches(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Benches returned from the connection."""
    where: BenchWhereInput
  ): BenchConnection!
  benchResults(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for BenchResults returned from the connection."""
    where: BenchResultWhereInput
  ): BenchResultConnection!
}
