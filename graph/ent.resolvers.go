package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"
	"fmt"

	"entgo.io/contrib/entgql"
	"github.com/nibbleshift/gorb/ent"
	"github.com/nibbleshift/gorb/graph/generated"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id int) (ent.Noder, error) {
	return r.client.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []int) ([]ent.Noder, error) {
	return r.client.Noders(ctx, ids)
}

// Benches is the resolver for the benches field.
func (r *queryResolver) Benches(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.BenchWhereInput) (*ent.BenchConnection, error) {
	return r.client.Bench.Query().
		Paginate(ctx, after, first, before, last)
}

// BenchResults is the resolver for the benchResults field.
func (r *queryResolver) BenchResults(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.BenchResultWhereInput) (*ent.BenchResultConnection, error) {
	panic(fmt.Errorf("not implemented: BenchResults - benchResults"))
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
