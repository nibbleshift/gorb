package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"
	"log"

	"github.com/davecgh/go-spew/spew"
	"github.com/nibbleshift/gorb/ent"
	"github.com/nibbleshift/gorb/graph/generated"
)

// CreateBenchmark is the resolver for the createBenchmark field.
func (r *mutationResolver) CreateBenchmark(ctx context.Context, input ent.CreateBenchInput, results []*ent.CreateBenchResultInput) (*ent.Bench, error) {
	benchResultIds := make([]int, 0, len(results))

	spew.Dump(results)
	for _, result := range results {
		res, err := r.client.BenchResult.Create().
			SetName(result.Name).
			SetN(result.N).
			SetNsPerOp(result.NsPerOp).
			SetAllocedBytesPerOp(result.AllocedBytesPerOp).
			SetAllocsPerOp(result.AllocsPerOp).
			SetMBPerS(result.MBPerS).
			SetMeasured(result.Measured).
			SetOrd(result.Ord).Save(ctx)

		if err != nil {
			log.Println(err)
			continue
		}
		benchResultIds = append(benchResultIds, res.ID)
	}
	res, err := r.client.Bench.Create().SetInput(input).AddBenchResultIDs(benchResultIds...).Save(ctx)

	return res, err
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
